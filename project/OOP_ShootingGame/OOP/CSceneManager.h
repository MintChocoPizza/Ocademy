#ifndef __CSCENEMANAGER_H__
#define	__CSCENEMANAGER_H__



////////////////////////////////////////////////////////////////////////////
// 씬을 관리할 싱글톤 클래스
// 
// 
////////////////////////////////////////////////////////////////////////////
class CSceneManager
{
public:
	//-------------------------------------------
	// Scene 전환에 필요한 정보
	// 
	// 이것을 전역으로 선언하는 것이 옳은지, 
	// 클래스의 public 멤버 변수가 맞는지, 
	//
	// 상황에 따라 friend로 열어야 하는지 의문
	// 
	//-------------------------------------------
	enum SceneType
	{
		TITLE,
		LOAD,
		GAME,
		CLEAR,
		OVER
	};

private:
	static CSceneManager _CSceneManager;
	CSceneBase* _pScene;


	bool ChangeScene;
	SceneType type;
	//------------------------------------------------------------------
	// 게임 스테이지에 대한 정보를 SceneLoad에 있어야 하는지,
	// SceneManager에 있어야 하는지 의문......
	// 
	// 매니저는 Scene을 관리하는 객체이므로 
	// SceneManager가 게임 스테이지를 관리 하여야 한다?
	// 
	// SceneLoad는 게임을 로드를 하는 객체이기 때문에 
	// static으로 게임 스테이지 정보를 들고 있어야 한다?
	// 
	// 
	// 
	// 
	//------------------------------------------------------------------
	int gameStage;
	int maxStage;
	bool loopEscape;


private:
	//---------------------------------------------------------------------------------------
	// 처음 시작을 타이틀 Scene을 로드 
	// 
	//---------------------------------------------------------------------------------------
	CSceneManager();
	~CSceneManager();
	int GetMaxStage(void);

public:
	static CSceneManager* GetInstance(void);
	bool run(void);


	//---------------------------------------------------------------------------------------
	// 어디서든 Scene를 전환할 수 있게 public으로 선언하였다.
	// 
	// 만약 LoadScene 함수에서 바로 Scene을 전환한다면,
	// Scene의 동작이 다 끝난 후 호출되면 괜찮지만, 동작이 다 끝나지 않은 상태로 호출될 경우
	// delete this 후 다시 this가 있던 자리의 메모리에 접근하게 된다. 
	// 
	// 그러므로 해당 함수에서는 어떤 함수로의 Scene 전환만 세팅만 한다.
	// 
	//---------------------------------------------------------------------------------------
	void LoadScene(SceneType type);			// 전환 씬을 넣어야 한다.


	
};


#endif // !__CSCENEMANAGER_H__

